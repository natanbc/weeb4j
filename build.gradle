plugins {
    id 'com.jfrog.bintray' version '1.7.2'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

def versionObj = new Version(major: 3, minor: 2, revision: 0)

group 'com.github.natanbc'
version "${versionObj}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/natanbc/maven' }
}

dependencies {
    //HTTP
    compile 'com.github.natanbc:reliqua:2.3.2'

    //JSON parser
    compile 'org.json:json:20170516'

    //Logging
    compile 'org.slf4j:slf4j-api:1.7.25'

    //Code safety
    compile 'com.google.code.findbugs:jsr305:3.0.2'
}

import org.apache.tools.ant.filters.ReplaceTokens

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            VERSION_MAJOR: versionObj.getMajor(),
            VERSION_MINOR: versionObj.getMinor(),
            VERSION_REVISION: versionObj.getRevision(),
            COMMIT_HASH: getCommitHash()
    ])
}

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    baseName = project.name
    manifest {
        attributes 'Implementation-Version': version
    }
}

shadowJar {
    classifier = "withDependencies"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "${buildDir}/filteredSrc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

bintray {
    project.version = "${versionObj}"
    user = bintrayUsername
    key = bintrayApiKey
    publications = ["BintrayRelease"]
    pkg {
        repo = 'maven'
        name = 'weeb4j'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/natanbc/weeb4j.git'
        publish = true
        version {
            name = project.version
            released = new Date()
        }
    }
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            from components.java
            groupId group
            artifactId archivesBaseName
            version version
            artifact javadocJar
            artifact sourcesJar
        }
    }
}

String getProjectProperty(String propertyName)
{
    String property = ""
    if (hasProperty(propertyName))
    {
        property = project.properties[propertyName]
    }
    return property
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}


build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    dependsOn test

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}

bintrayUpload {
    dependsOn build

    onlyIf { !getProjectProperty("bintrayUsername").empty }
    onlyIf { !getProjectProperty("bintrayApiKey").empty }
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}

class Version {
    String major, minor, revision


    String toString() {
        "${major}.${minor}" + (revision == "0" ? "" : ".${revision}")
    }
}